import CryptoJS from"crypto-js";export default class crypto{// 使用AesUtil.genAesKey()生成,需和后端配置保持一致
static aesKey="O2BEeIv399qHQNhD6aGW8R8DEj4bqHXm";// 使用DesUtil.genDesKey()生成,需和后端配置保持一致
static desKey="jMVCBsFGDQr1USHo";/**
   * aes 加密方法
   * @param data
   * @returns {*}
   */static encrypt(a){return this.encryptAES(a,this.aesKey)}/**
   * aes 解密方法
   * @param data
   * @returns {*}
   */static decrypt(a){return this.decryptAES(a,this.aesKey)}/**
   * aes 加密方法，同java：AesUtil.encryptToBase64(text, aesKey);
   */static encryptAES(a,b){const c=CryptoJS.enc.Utf8.parse(a),d=CryptoJS.enc.Utf8.parse(b),e=CryptoJS.AES.encrypt(c,d,{iv:d,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return CryptoJS.enc.Base64.stringify(e.ciphertext)}/**
   * aes 解密方法，同java：AesUtil.decryptFormBase64ToString(encrypt, aesKey);
   */static decryptAES(a,b){const c=CryptoJS.enc.Utf8.parse(b),d=CryptoJS.AES.decrypt(a,c,{iv:c,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return CryptoJS.enc.Utf8.stringify(d)}/**
   * des 加密方法，同java：DesUtil.encryptToBase64(text, desKey)
   */static encryptDES(a,b){const c=CryptoJS.enc.Utf8.parse(b),d=CryptoJS.DES.encrypt(a,c,{mode:CryptoJS.mode.ECB,padding:CryptoJS.pad.Pkcs7});return d.toString()}/**
   * des 解密方法，同java：DesUtil.decryptFormBase64(encryptBase64, desKey);
   */static decryptDES(a,b){const c=CryptoJS.enc.Utf8.parse(b),d=CryptoJS.DES.decrypt({ciphertext:CryptoJS.enc.Base64.parse(a)},c,{mode:CryptoJS.mode.ECB,padding:CryptoJS.pad.Pkcs7});return d.toString(CryptoJS.enc.Utf8)}}